<?php

/**
 * This is the model base class for the table "Property".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Property".
 *
 * Columns in table "Property" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $accountID
 * @property string $deviceID
 * @property string $propKey
 * @property string $timestamp
 * @property string $binaryValue
 *
 */
abstract class BaseProperty extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'Property';
    }

    public static function representingColumn() {
        return 'accountID';
    }

    public function rules() {
        return array(
            array('accountID, deviceID, propKey', 'required'),
            array('accountID, deviceID', 'length', 'max'=>32),
            array('propKey, timestamp', 'length', 'max'=>10),
            array('binaryValue', 'safe'),
            array('timestamp, binaryValue', 'default', 'setOnEmpty' => true, 'value' => null),
            array('accountID, deviceID, propKey, timestamp, binaryValue', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'accountID' => Yii::t('app', 'Account'),
                'deviceID' => Yii::t('app', 'Device'),
                'propKey' => Yii::t('app', 'Prop Key'),
                'timestamp' => Yii::t('app', 'Timestamp'),
                'binaryValue' => Yii::t('app', 'Binary Value'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('accountID', $this->accountID, true);
        $criteria->compare('deviceID', $this->deviceID, true);
        $criteria->compare('propKey', $this->propKey, true);
        $criteria->compare('timestamp', $this->timestamp, true);
        $criteria->compare('binaryValue', $this->binaryValue, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => null,
                'updateAttribute' => 'timestamp',
                'timestampExpression' => new CDbExpression('NOW()'),
            )
        ), parent::behaviors());
    }
}