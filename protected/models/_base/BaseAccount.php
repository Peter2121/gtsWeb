<?php

/**
 * This is the model base class for the table "Account".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Account".
 *
 * Columns in table "Account" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $accountID
 * @property integer $accountType
 * @property string $notifyEmail
 * @property integer $speedUnits
 * @property integer $distanceUnits
 * @property integer $volumeUnits
 * @property integer $pressureUnits
 * @property integer $economyUnits
 * @property integer $temperatureUnits
 * @property integer $latLonFormat
 * @property integer $geocoderMode
 * @property string $privateLabelName
 * @property integer $isBorderCrossing
 * @property string $retainedEventAge
 * @property integer $maximumDevices
 * @property integer $totalPingCount
 * @property integer $maxPingCount
 * @property integer $autoAddDevices
 * @property string $dcsPropertiesID
 * @property string $expirationTime
 * @property string $defaultUser
 * @property string $password
 * @property string $contactName
 * @property string $contactPhone
 * @property string $contactEmail
 * @property string $timeZone
 * @property string $passwdQueryTime
 * @property string $lastLoginTime
 * @property integer $isActive
 * @property string $displayName
 * @property string $description
 * @property string $notes
 * @property string $lastUpdateTime
 * @property string $creationTime
 * @property integer $smsEnabled
 * @property string $smsProperties
 * @property string $emailProperties
 * @property string $passwdChangeTime
 * @property string $mapLegendDevice
 * @property string $mapLegendGroup
 * @property integer $isAccountManager
 * @property string $managerID
 * @property string $requestPassCode
 * @property string $requestIPAddress
 * @property string $dataPushURL
 * @property string $lastDataRequestTime
 * @property string $lastDataPushTime
 *
 */
abstract class BaseAccount extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'Account';
    }

    public static function representingColumn() {
        return 'accountID';
    }

    public function rules() {
        return array(
            array('accountID', 'required'),
            array('accountType, speedUnits, distanceUnits, volumeUnits, pressureUnits, economyUnits, temperatureUnits, latLonFormat, geocoderMode, isBorderCrossing, maximumDevices, totalPingCount, maxPingCount, autoAddDevices, isActive, smsEnabled, isAccountManager', 'numerical', 'integerOnly'=>true),
            array('accountID, privateLabelName, dcsPropertiesID, defaultUser, password, contactPhone, timeZone, managerID, requestPassCode', 'length', 'max'=>32),
            array('notifyEmail, contactEmail, description, requestIPAddress', 'length', 'max'=>128),
            array('retainedEventAge, expirationTime, passwdQueryTime, lastLoginTime, lastUpdateTime, creationTime, passwdChangeTime, lastDataRequestTime, lastDataPushTime', 'length', 'max'=>10),
            array('contactName', 'length', 'max'=>64),
            array('displayName', 'length', 'max'=>40),
            array('smsProperties', 'length', 'max'=>200),
            array('emailProperties', 'length', 'max'=>250),
            array('dataPushURL', 'length', 'max'=>240),
            array('notes, mapLegendDevice, mapLegendGroup', 'safe'),
            array('accountType, notifyEmail, speedUnits, distanceUnits, volumeUnits, pressureUnits, economyUnits, temperatureUnits, latLonFormat, geocoderMode, privateLabelName, isBorderCrossing, retainedEventAge, maximumDevices, totalPingCount, maxPingCount, autoAddDevices, dcsPropertiesID, expirationTime, defaultUser, password, contactName, contactPhone, contactEmail, timeZone, passwdQueryTime, lastLoginTime, isActive, displayName, description, notes, lastUpdateTime, creationTime, smsEnabled, smsProperties, emailProperties, passwdChangeTime, mapLegendDevice, mapLegendGroup, isAccountManager, managerID, requestPassCode, requestIPAddress, dataPushURL, lastDataRequestTime, lastDataPushTime', 'default', 'setOnEmpty' => true, 'value' => null),
            array('accountID, accountType, notifyEmail, speedUnits, distanceUnits, volumeUnits, pressureUnits, economyUnits, temperatureUnits, latLonFormat, geocoderMode, privateLabelName, isBorderCrossing, retainedEventAge, maximumDevices, totalPingCount, maxPingCount, autoAddDevices, dcsPropertiesID, expirationTime, defaultUser, password, contactName, contactPhone, contactEmail, timeZone, passwdQueryTime, lastLoginTime, isActive, displayName, description, notes, lastUpdateTime, creationTime, smsEnabled, smsProperties, emailProperties, passwdChangeTime, mapLegendDevice, mapLegendGroup, isAccountManager, managerID, requestPassCode, requestIPAddress, dataPushURL, lastDataRequestTime, lastDataPushTime', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'accountID' => Yii::t('app', 'Account'),
                'accountType' => Yii::t('app', 'Account Type'),
                'notifyEmail' => Yii::t('app', 'Notify Email'),
                'speedUnits' => Yii::t('app', 'Speed Units'),
                'distanceUnits' => Yii::t('app', 'Distance Units'),
                'volumeUnits' => Yii::t('app', 'Volume Units'),
                'pressureUnits' => Yii::t('app', 'Pressure Units'),
                'economyUnits' => Yii::t('app', 'Economy Units'),
                'temperatureUnits' => Yii::t('app', 'Temperature Units'),
                'latLonFormat' => Yii::t('app', 'Lat Lon Format'),
                'geocoderMode' => Yii::t('app', 'Geocoder Mode'),
                'privateLabelName' => Yii::t('app', 'Private Label Name'),
                'isBorderCrossing' => Yii::t('app', 'Is Border Crossing'),
                'retainedEventAge' => Yii::t('app', 'Retained Event Age'),
                'maximumDevices' => Yii::t('app', 'Maximum Devices'),
                'totalPingCount' => Yii::t('app', 'Total Ping Count'),
                'maxPingCount' => Yii::t('app', 'Max Ping Count'),
                'autoAddDevices' => Yii::t('app', 'Auto Add Devices'),
                'dcsPropertiesID' => Yii::t('app', 'Dcs Properties'),
                'expirationTime' => Yii::t('app', 'Expiration Time'),
                'defaultUser' => Yii::t('app', 'Default User'),
                'password' => Yii::t('app', 'Password'),
                'contactName' => Yii::t('app', 'Contact Name'),
                'contactPhone' => Yii::t('app', 'Contact Phone'),
                'contactEmail' => Yii::t('app', 'Contact Email'),
                'timeZone' => Yii::t('app', 'Time Zone'),
                'passwdQueryTime' => Yii::t('app', 'Passwd Query Time'),
                'lastLoginTime' => Yii::t('app', 'Last Login Time'),
                'isActive' => Yii::t('app', 'Is Active'),
                'displayName' => Yii::t('app', 'Display Name'),
                'description' => Yii::t('app', 'Description'),
                'notes' => Yii::t('app', 'Notes'),
                'lastUpdateTime' => Yii::t('app', 'Last Update Time'),
                'creationTime' => Yii::t('app', 'Creation Time'),
                'smsEnabled' => Yii::t('app', 'Sms Enabled'),
                'smsProperties' => Yii::t('app', 'Sms Properties'),
                'emailProperties' => Yii::t('app', 'Email Properties'),
                'passwdChangeTime' => Yii::t('app', 'Passwd Change Time'),
                'mapLegendDevice' => Yii::t('app', 'Map Legend Device'),
                'mapLegendGroup' => Yii::t('app', 'Map Legend Group'),
                'isAccountManager' => Yii::t('app', 'Is Account Manager'),
                'managerID' => Yii::t('app', 'Manager'),
                'requestPassCode' => Yii::t('app', 'Request Pass Code'),
                'requestIPAddress' => Yii::t('app', 'Request Ipaddress'),
                'dataPushURL' => Yii::t('app', 'Data Push Url'),
                'lastDataRequestTime' => Yii::t('app', 'Last Data Request Time'),
                'lastDataPushTime' => Yii::t('app', 'Last Data Push Time'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('accountID', $this->accountID, true);
        $criteria->compare('accountType', $this->accountType);
        $criteria->compare('notifyEmail', $this->notifyEmail, true);
        $criteria->compare('speedUnits', $this->speedUnits);
        $criteria->compare('distanceUnits', $this->distanceUnits);
        $criteria->compare('volumeUnits', $this->volumeUnits);
        $criteria->compare('pressureUnits', $this->pressureUnits);
        $criteria->compare('economyUnits', $this->economyUnits);
        $criteria->compare('temperatureUnits', $this->temperatureUnits);
        $criteria->compare('latLonFormat', $this->latLonFormat);
        $criteria->compare('geocoderMode', $this->geocoderMode);
        $criteria->compare('privateLabelName', $this->privateLabelName, true);
        $criteria->compare('isBorderCrossing', $this->isBorderCrossing);
        $criteria->compare('retainedEventAge', $this->retainedEventAge, true);
        $criteria->compare('maximumDevices', $this->maximumDevices);
        $criteria->compare('totalPingCount', $this->totalPingCount);
        $criteria->compare('maxPingCount', $this->maxPingCount);
        $criteria->compare('autoAddDevices', $this->autoAddDevices);
        $criteria->compare('dcsPropertiesID', $this->dcsPropertiesID, true);
        $criteria->compare('expirationTime', $this->expirationTime, true);
        $criteria->compare('defaultUser', $this->defaultUser, true);
        $criteria->compare('password', $this->password, true);
        $criteria->compare('contactName', $this->contactName, true);
        $criteria->compare('contactPhone', $this->contactPhone, true);
        $criteria->compare('contactEmail', $this->contactEmail, true);
        $criteria->compare('timeZone', $this->timeZone, true);
        $criteria->compare('passwdQueryTime', $this->passwdQueryTime, true);
        $criteria->compare('lastLoginTime', $this->lastLoginTime, true);
        $criteria->compare('isActive', $this->isActive);
        $criteria->compare('displayName', $this->displayName, true);
        $criteria->compare('description', $this->description, true);
        $criteria->compare('notes', $this->notes, true);
        $criteria->compare('lastUpdateTime', $this->lastUpdateTime, true);
        $criteria->compare('creationTime', $this->creationTime, true);
        $criteria->compare('smsEnabled', $this->smsEnabled);
        $criteria->compare('smsProperties', $this->smsProperties, true);
        $criteria->compare('emailProperties', $this->emailProperties, true);
        $criteria->compare('passwdChangeTime', $this->passwdChangeTime, true);
        $criteria->compare('mapLegendDevice', $this->mapLegendDevice, true);
        $criteria->compare('mapLegendGroup', $this->mapLegendGroup, true);
        $criteria->compare('isAccountManager', $this->isAccountManager);
        $criteria->compare('managerID', $this->managerID, true);
        $criteria->compare('requestPassCode', $this->requestPassCode, true);
        $criteria->compare('requestIPAddress', $this->requestIPAddress, true);
        $criteria->compare('dataPushURL', $this->dataPushURL, true);
        $criteria->compare('lastDataRequestTime', $this->lastDataRequestTime, true);
        $criteria->compare('lastDataPushTime', $this->lastDataPushTime, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}