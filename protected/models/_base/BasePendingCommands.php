<?php

/**
 * This is the model base class for the table "PendingCommands".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PendingCommands".
 *
 * Columns in table "PendingCommands" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $accountID
 * @property string $deviceID
 * @property string $queueTime
 * @property integer $sendState
 * @property string $commandType
 * @property string $commandID
 * @property string $commandArgs
 * @property string $sendTime
 * @property integer $deleteAfter
 * @property string $ackTime
 * @property integer $ackResponse
 * @property string $lastUpdateTime
 * @property string $creationTime
 *
 */
abstract class BasePendingCommands extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'PendingCommands';
    }

    public static function representingColumn() {
        return 'accountID';
    }

    public function rules() {
        return array(
            array('accountID, deviceID, queueTime, sendState, commandType, commandID', 'required'),
            array('sendState, deleteAfter, ackResponse', 'numerical', 'integerOnly'=>true),
            array('accountID, deviceID, commandType, commandID', 'length', 'max'=>32),
            array('queueTime, sendTime, ackTime, lastUpdateTime, creationTime', 'length', 'max'=>10),
            array('commandArgs', 'length', 'max'=>128),
            array('commandArgs, sendTime, deleteAfter, ackTime, ackResponse, lastUpdateTime, creationTime', 'default', 'setOnEmpty' => true, 'value' => null),
            array('accountID, deviceID, queueTime, sendState, commandType, commandID, commandArgs, sendTime, deleteAfter, ackTime, ackResponse, lastUpdateTime, creationTime', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'accountID' => Yii::t('app', 'Account'),
                'deviceID' => Yii::t('app', 'Device'),
                'queueTime' => Yii::t('app', 'Queue Time'),
                'sendState' => Yii::t('app', 'Send State'),
                'commandType' => Yii::t('app', 'Command Type'),
                'commandID' => Yii::t('app', 'Command'),
                'commandArgs' => Yii::t('app', 'Command Args'),
                'sendTime' => Yii::t('app', 'Send Time'),
                'deleteAfter' => Yii::t('app', 'Delete After'),
                'ackTime' => Yii::t('app', 'Ack Time'),
                'ackResponse' => Yii::t('app', 'Ack Response'),
                'lastUpdateTime' => Yii::t('app', 'Last Update Time'),
                'creationTime' => Yii::t('app', 'Creation Time'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('accountID', $this->accountID, true);
        $criteria->compare('deviceID', $this->deviceID, true);
        $criteria->compare('queueTime', $this->queueTime, true);
        $criteria->compare('sendState', $this->sendState);
        $criteria->compare('commandType', $this->commandType, true);
        $criteria->compare('commandID', $this->commandID, true);
        $criteria->compare('commandArgs', $this->commandArgs, true);
        $criteria->compare('sendTime', $this->sendTime, true);
        $criteria->compare('deleteAfter', $this->deleteAfter);
        $criteria->compare('ackTime', $this->ackTime, true);
        $criteria->compare('ackResponse', $this->ackResponse);
        $criteria->compare('lastUpdateTime', $this->lastUpdateTime, true);
        $criteria->compare('creationTime', $this->creationTime, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}