<?php

/**
 * This is the model base class for the table "EventTemplate".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "EventTemplate".
 *
 * Columns in table "EventTemplate" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $accountID
 * @property string $deviceID
 * @property integer $customType
 * @property integer $repeatLast
 * @property string $template
 *
 */
abstract class BaseEventTemplate extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'EventTemplate';
    }

    public static function representingColumn() {
        return 'accountID';
    }

    public function rules() {
        return array(
            array('accountID, deviceID, customType', 'required'),
            array('customType, repeatLast', 'numerical', 'integerOnly'=>true),
            array('accountID, deviceID', 'length', 'max'=>32),
            array('template', 'safe'),
            array('repeatLast, template', 'default', 'setOnEmpty' => true, 'value' => null),
            array('accountID, deviceID, customType, repeatLast, template', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'accountID' => Yii::t('app', 'Account'),
                'deviceID' => Yii::t('app', 'Device'),
                'customType' => Yii::t('app', 'Custom Type'),
                'repeatLast' => Yii::t('app', 'Repeat Last'),
                'template' => Yii::t('app', 'Template'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('accountID', $this->accountID, true);
        $criteria->compare('deviceID', $this->deviceID, true);
        $criteria->compare('customType', $this->customType);
        $criteria->compare('repeatLast', $this->repeatLast);
        $criteria->compare('template', $this->template, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}