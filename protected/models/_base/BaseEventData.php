<?php

/**
 * This is the model base class for the table "EventData".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "EventData".
 *
 * Columns in table "EventData" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $accountID
 * @property string $deviceID
 * @property string $timestamp
 * @property string $statusCode
 * @property double $latitude
 * @property double $longitude
 * @property string $gpsAge
 * @property double $speedKPH
 * @property double $heading
 * @property double $altitude
 * @property string $transportID
 * @property string $inputMask
 * @property string $outputMask
 * @property string $address
 * @property string $dataSource
 * @property string $rawData
 * @property double $distanceKM
 * @property double $odometerKM
 * @property string $geozoneIndex
 * @property string $geozoneID
 * @property string $creationTime
 * @property string $streetAddress
 * @property string $city
 * @property string $stateProvince
 * @property string $postalCode
 * @property string $country
 * @property string $subdivision
 * @property double $speedLimitKPH
 * @property integer $isTollRoad
 * @property integer $gpsFixType
 * @property double $horzAccuracy
 * @property double $vertAccuracy
 * @property double $HDOP
 * @property integer $satelliteCount
 * @property double $batteryLevel
 * @property double $batteryVolts
 * @property double $signalStrength
 * @property string $entityID
 * @property string $driverID
 * @property string $driverStatus
 * @property string $driverMessage
 * @property string $sensorLow
 * @property string $sensorHigh
 * @property string $costCenter
 * @property string $jobNumber
 * @property string $rfidTag
 * @property string $attachType
 * @property string $attachData
 * @property double $fuelPressure
 * @property double $fuelUsage
 * @property double $fuelTemp
 * @property double $fuelLevel
 * @property double $fuelLevel2
 * @property double $fuelEconomy
 * @property double $fuelTotal
 * @property double $fuelTrip
 * @property double $fuelIdle
 * @property double $fuelPTO
 * @property double $fuelEngineOn
 * @property string $engineRpm
 * @property double $engineHours
 * @property double $engineOnHours
 * @property double $engineLoad
 * @property double $engineTorque
 * @property double $idleHours
 * @property double $workHours
 * @property double $transOilTemp
 * @property double $coolantLevel
 * @property double $coolantTemp
 * @property double $intakeTemp
 * @property double $brakeGForce
 * @property double $acceleration
 * @property double $brakePressure
 * @property double $massAirFlowRate
 * @property double $oilPressure
 * @property double $oilLevel
 * @property double $oilTemp
 * @property double $airPressure
 * @property double $airFilterPressure
 * @property double $turboPressure
 * @property integer $ptoEngaged
 * @property double $ptoHours
 * @property double $throttlePos
 * @property double $brakePos
 * @property double $vBatteryVolts
 * @property string $j1708Fault
 * @property string $faultCode
 * @property integer $malfunctionLamp
 * @property string $tirePressure
 * @property string $tireTemp
 * @property double $tankLevel
 * @property double $thermoAverage0
 * @property double $thermoAverage1
 *
 */
abstract class BaseEventData extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'EventData';
    }

    public static function representingColumn() {
        return 'accountID';
    }

    public function rules() {
        return array(
            array('accountID, deviceID, statusCode', 'required'),
            array('isTollRoad, gpsFixType, satelliteCount, ptoEngaged, malfunctionLamp', 'numerical', 'integerOnly'=>true),
            array('latitude, longitude, speedKPH, heading, altitude, distanceKM, odometerKM, speedLimitKPH, horzAccuracy, vertAccuracy, HDOP, batteryLevel, batteryVolts, signalStrength, fuelPressure, fuelUsage, fuelTemp, fuelLevel, fuelLevel2, fuelEconomy, fuelTotal, fuelTrip, fuelIdle, fuelPTO, fuelEngineOn, engineHours, engineOnHours, engineLoad, engineTorque, idleHours, workHours, transOilTemp, coolantLevel, coolantTemp, intakeTemp, brakeGForce, acceleration, brakePressure, massAirFlowRate, oilPressure, oilLevel, oilTemp, airPressure, airFilterPressure, turboPressure, ptoHours, throttlePos, brakePos, vBatteryVolts, tankLevel, thermoAverage0, thermoAverage1', 'numerical'),
            array('accountID, deviceID, transportID, dataSource, geozoneID, subdivision, entityID, driverID, jobNumber, rfidTag', 'length', 'max'=>32),
            array('timestamp, statusCode, gpsAge, inputMask, outputMask, geozoneIndex, creationTime, driverStatus, sensorLow, sensorHigh, costCenter, engineRpm', 'length', 'max'=>10),
            array('address, streetAddress', 'length', 'max'=>90),
            array('city, stateProvince, country', 'length', 'max'=>40),
            array('postalCode', 'length', 'max'=>16),
            array('driverMessage', 'length', 'max'=>200),
            array('attachType', 'length', 'max'=>64),
            array('j1708Fault', 'length', 'max'=>20),
            array('faultCode', 'length', 'max'=>96),
            array('tirePressure, tireTemp', 'length', 'max'=>140),
            array('rawData, attachData', 'safe'),
            array('latitude, longitude, gpsAge, speedKPH, heading, altitude, transportID, inputMask, outputMask, address, dataSource, rawData, distanceKM, odometerKM, geozoneIndex, geozoneID, creationTime, streetAddress, city, stateProvince, postalCode, country, subdivision, speedLimitKPH, isTollRoad, gpsFixType, horzAccuracy, vertAccuracy, HDOP, satelliteCount, batteryLevel, batteryVolts, signalStrength, entityID, driverID, driverStatus, driverMessage, sensorLow, sensorHigh, costCenter, jobNumber, rfidTag, attachType, attachData, fuelPressure, fuelUsage, fuelTemp, fuelLevel, fuelLevel2, fuelEconomy, fuelTotal, fuelTrip, fuelIdle, fuelPTO, fuelEngineOn, engineRpm, engineHours, engineOnHours, engineLoad, engineTorque, idleHours, workHours, transOilTemp, coolantLevel, coolantTemp, intakeTemp, brakeGForce, acceleration, brakePressure, massAirFlowRate, oilPressure, oilLevel, oilTemp, airPressure, airFilterPressure, turboPressure, ptoEngaged, ptoHours, throttlePos, brakePos, vBatteryVolts, j1708Fault, faultCode, malfunctionLamp, tirePressure, tireTemp, tankLevel, thermoAverage0, thermoAverage1', 'default', 'setOnEmpty' => true, 'value' => null),
            array('accountID, deviceID, timestamp, statusCode, latitude, longitude, gpsAge, speedKPH, heading, altitude, transportID, inputMask, outputMask, address, dataSource, rawData, distanceKM, odometerKM, geozoneIndex, geozoneID, creationTime, streetAddress, city, stateProvince, postalCode, country, subdivision, speedLimitKPH, isTollRoad, gpsFixType, horzAccuracy, vertAccuracy, HDOP, satelliteCount, batteryLevel, batteryVolts, signalStrength, entityID, driverID, driverStatus, driverMessage, sensorLow, sensorHigh, costCenter, jobNumber, rfidTag, attachType, attachData, fuelPressure, fuelUsage, fuelTemp, fuelLevel, fuelLevel2, fuelEconomy, fuelTotal, fuelTrip, fuelIdle, fuelPTO, fuelEngineOn, engineRpm, engineHours, engineOnHours, engineLoad, engineTorque, idleHours, workHours, transOilTemp, coolantLevel, coolantTemp, intakeTemp, brakeGForce, acceleration, brakePressure, massAirFlowRate, oilPressure, oilLevel, oilTemp, airPressure, airFilterPressure, turboPressure, ptoEngaged, ptoHours, throttlePos, brakePos, vBatteryVolts, j1708Fault, faultCode, malfunctionLamp, tirePressure, tireTemp, tankLevel, thermoAverage0, thermoAverage1', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'accountID' => Yii::t('app', 'Account'),
                'deviceID' => Yii::t('app', 'Device'),
                'timestamp' => Yii::t('app', 'Timestamp'),
                'statusCode' => Yii::t('app', 'Status Code'),
                'latitude' => Yii::t('app', 'Latitude'),
                'longitude' => Yii::t('app', 'Longitude'),
                'gpsAge' => Yii::t('app', 'Gps Age'),
                'speedKPH' => Yii::t('app', 'Speed Kph'),
                'heading' => Yii::t('app', 'Heading'),
                'altitude' => Yii::t('app', 'Altitude'),
                'transportID' => Yii::t('app', 'Transport'),
                'inputMask' => Yii::t('app', 'Input Mask'),
                'outputMask' => Yii::t('app', 'Output Mask'),
                'address' => Yii::t('app', 'Address'),
                'dataSource' => Yii::t('app', 'Data Source'),
                'rawData' => Yii::t('app', 'Raw Data'),
                'distanceKM' => Yii::t('app', 'Distance Km'),
                'odometerKM' => Yii::t('app', 'Odometer Km'),
                'geozoneIndex' => Yii::t('app', 'Geozone Index'),
                'geozoneID' => Yii::t('app', 'Geozone'),
                'creationTime' => Yii::t('app', 'Creation Time'),
                'streetAddress' => Yii::t('app', 'Street Address'),
                'city' => Yii::t('app', 'City'),
                'stateProvince' => Yii::t('app', 'State Province'),
                'postalCode' => Yii::t('app', 'Postal Code'),
                'country' => Yii::t('app', 'Country'),
                'subdivision' => Yii::t('app', 'Subdivision'),
                'speedLimitKPH' => Yii::t('app', 'Speed Limit Kph'),
                'isTollRoad' => Yii::t('app', 'Is Toll Road'),
                'gpsFixType' => Yii::t('app', 'Gps Fix Type'),
                'horzAccuracy' => Yii::t('app', 'Horz Accuracy'),
                'vertAccuracy' => Yii::t('app', 'Vert Accuracy'),
                'HDOP' => Yii::t('app', 'Hdop'),
                'satelliteCount' => Yii::t('app', 'Satellite Count'),
                'batteryLevel' => Yii::t('app', 'Battery Level'),
                'batteryVolts' => Yii::t('app', 'Battery Volts'),
                'signalStrength' => Yii::t('app', 'Signal Strength'),
                'entityID' => Yii::t('app', 'Entity'),
                'driverID' => Yii::t('app', 'Driver'),
                'driverStatus' => Yii::t('app', 'Driver Status'),
                'driverMessage' => Yii::t('app', 'Driver Message'),
                'sensorLow' => Yii::t('app', 'Sensor Low'),
                'sensorHigh' => Yii::t('app', 'Sensor High'),
                'costCenter' => Yii::t('app', 'Cost Center'),
                'jobNumber' => Yii::t('app', 'Job Number'),
                'rfidTag' => Yii::t('app', 'Rfid Tag'),
                'attachType' => Yii::t('app', 'Attach Type'),
                'attachData' => Yii::t('app', 'Attach Data'),
                'fuelPressure' => Yii::t('app', 'Fuel Pressure'),
                'fuelUsage' => Yii::t('app', 'Fuel Usage'),
                'fuelTemp' => Yii::t('app', 'Fuel Temp'),
                'fuelLevel' => Yii::t('app', 'Fuel Level'),
                'fuelLevel2' => Yii::t('app', 'Fuel Level2'),
                'fuelEconomy' => Yii::t('app', 'Fuel Economy'),
                'fuelTotal' => Yii::t('app', 'Fuel Total'),
                'fuelTrip' => Yii::t('app', 'Fuel Trip'),
                'fuelIdle' => Yii::t('app', 'Fuel Idle'),
                'fuelPTO' => Yii::t('app', 'Fuel Pto'),
                'fuelEngineOn' => Yii::t('app', 'Fuel Engine On'),
                'engineRpm' => Yii::t('app', 'Engine Rpm'),
                'engineHours' => Yii::t('app', 'Engine Hours'),
                'engineOnHours' => Yii::t('app', 'Engine On Hours'),
                'engineLoad' => Yii::t('app', 'Engine Load'),
                'engineTorque' => Yii::t('app', 'Engine Torque'),
                'idleHours' => Yii::t('app', 'Idle Hours'),
                'workHours' => Yii::t('app', 'Work Hours'),
                'transOilTemp' => Yii::t('app', 'Trans Oil Temp'),
                'coolantLevel' => Yii::t('app', 'Coolant Level'),
                'coolantTemp' => Yii::t('app', 'Coolant Temp'),
                'intakeTemp' => Yii::t('app', 'Intake Temp'),
                'brakeGForce' => Yii::t('app', 'Brake Gforce'),
                'acceleration' => Yii::t('app', 'Acceleration'),
                'brakePressure' => Yii::t('app', 'Brake Pressure'),
                'massAirFlowRate' => Yii::t('app', 'Mass Air Flow Rate'),
                'oilPressure' => Yii::t('app', 'Oil Pressure'),
                'oilLevel' => Yii::t('app', 'Oil Level'),
                'oilTemp' => Yii::t('app', 'Oil Temp'),
                'airPressure' => Yii::t('app', 'Air Pressure'),
                'airFilterPressure' => Yii::t('app', 'Air Filter Pressure'),
                'turboPressure' => Yii::t('app', 'Turbo Pressure'),
                'ptoEngaged' => Yii::t('app', 'Pto Engaged'),
                'ptoHours' => Yii::t('app', 'Pto Hours'),
                'throttlePos' => Yii::t('app', 'Throttle Pos'),
                'brakePos' => Yii::t('app', 'Brake Pos'),
                'vBatteryVolts' => Yii::t('app', 'V Battery Volts'),
                'j1708Fault' => Yii::t('app', 'J1708 Fault'),
                'faultCode' => Yii::t('app', 'Fault Code'),
                'malfunctionLamp' => Yii::t('app', 'Malfunction Lamp'),
                'tirePressure' => Yii::t('app', 'Tire Pressure'),
                'tireTemp' => Yii::t('app', 'Tire Temp'),
                'tankLevel' => Yii::t('app', 'Tank Level'),
                'thermoAverage0' => Yii::t('app', 'Thermo Average0'),
                'thermoAverage1' => Yii::t('app', 'Thermo Average1'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('accountID', $this->accountID, true);
        $criteria->compare('deviceID', $this->deviceID, true);
        $criteria->compare('timestamp', $this->timestamp, true);
        $criteria->compare('statusCode', $this->statusCode, true);
        $criteria->compare('latitude', $this->latitude);
        $criteria->compare('longitude', $this->longitude);
        $criteria->compare('gpsAge', $this->gpsAge, true);
        $criteria->compare('speedKPH', $this->speedKPH);
        $criteria->compare('heading', $this->heading);
        $criteria->compare('altitude', $this->altitude);
        $criteria->compare('transportID', $this->transportID, true);
        $criteria->compare('inputMask', $this->inputMask, true);
        $criteria->compare('outputMask', $this->outputMask, true);
        $criteria->compare('address', $this->address, true);
        $criteria->compare('dataSource', $this->dataSource, true);
        $criteria->compare('rawData', $this->rawData, true);
        $criteria->compare('distanceKM', $this->distanceKM);
        $criteria->compare('odometerKM', $this->odometerKM);
        $criteria->compare('geozoneIndex', $this->geozoneIndex, true);
        $criteria->compare('geozoneID', $this->geozoneID, true);
        $criteria->compare('creationTime', $this->creationTime, true);
        $criteria->compare('streetAddress', $this->streetAddress, true);
        $criteria->compare('city', $this->city, true);
        $criteria->compare('stateProvince', $this->stateProvince, true);
        $criteria->compare('postalCode', $this->postalCode, true);
        $criteria->compare('country', $this->country, true);
        $criteria->compare('subdivision', $this->subdivision, true);
        $criteria->compare('speedLimitKPH', $this->speedLimitKPH);
        $criteria->compare('isTollRoad', $this->isTollRoad);
        $criteria->compare('gpsFixType', $this->gpsFixType);
        $criteria->compare('horzAccuracy', $this->horzAccuracy);
        $criteria->compare('vertAccuracy', $this->vertAccuracy);
        $criteria->compare('HDOP', $this->HDOP);
        $criteria->compare('satelliteCount', $this->satelliteCount);
        $criteria->compare('batteryLevel', $this->batteryLevel);
        $criteria->compare('batteryVolts', $this->batteryVolts);
        $criteria->compare('signalStrength', $this->signalStrength);
        $criteria->compare('entityID', $this->entityID, true);
        $criteria->compare('driverID', $this->driverID, true);
        $criteria->compare('driverStatus', $this->driverStatus, true);
        $criteria->compare('driverMessage', $this->driverMessage, true);
        $criteria->compare('sensorLow', $this->sensorLow, true);
        $criteria->compare('sensorHigh', $this->sensorHigh, true);
        $criteria->compare('costCenter', $this->costCenter, true);
        $criteria->compare('jobNumber', $this->jobNumber, true);
        $criteria->compare('rfidTag', $this->rfidTag, true);
        $criteria->compare('attachType', $this->attachType, true);
        $criteria->compare('attachData', $this->attachData, true);
        $criteria->compare('fuelPressure', $this->fuelPressure);
        $criteria->compare('fuelUsage', $this->fuelUsage);
        $criteria->compare('fuelTemp', $this->fuelTemp);
        $criteria->compare('fuelLevel', $this->fuelLevel);
        $criteria->compare('fuelLevel2', $this->fuelLevel2);
        $criteria->compare('fuelEconomy', $this->fuelEconomy);
        $criteria->compare('fuelTotal', $this->fuelTotal);
        $criteria->compare('fuelTrip', $this->fuelTrip);
        $criteria->compare('fuelIdle', $this->fuelIdle);
        $criteria->compare('fuelPTO', $this->fuelPTO);
        $criteria->compare('fuelEngineOn', $this->fuelEngineOn);
        $criteria->compare('engineRpm', $this->engineRpm, true);
        $criteria->compare('engineHours', $this->engineHours);
        $criteria->compare('engineOnHours', $this->engineOnHours);
        $criteria->compare('engineLoad', $this->engineLoad);
        $criteria->compare('engineTorque', $this->engineTorque);
        $criteria->compare('idleHours', $this->idleHours);
        $criteria->compare('workHours', $this->workHours);
        $criteria->compare('transOilTemp', $this->transOilTemp);
        $criteria->compare('coolantLevel', $this->coolantLevel);
        $criteria->compare('coolantTemp', $this->coolantTemp);
        $criteria->compare('intakeTemp', $this->intakeTemp);
        $criteria->compare('brakeGForce', $this->brakeGForce);
        $criteria->compare('acceleration', $this->acceleration);
        $criteria->compare('brakePressure', $this->brakePressure);
        $criteria->compare('massAirFlowRate', $this->massAirFlowRate);
        $criteria->compare('oilPressure', $this->oilPressure);
        $criteria->compare('oilLevel', $this->oilLevel);
        $criteria->compare('oilTemp', $this->oilTemp);
        $criteria->compare('airPressure', $this->airPressure);
        $criteria->compare('airFilterPressure', $this->airFilterPressure);
        $criteria->compare('turboPressure', $this->turboPressure);
        $criteria->compare('ptoEngaged', $this->ptoEngaged);
        $criteria->compare('ptoHours', $this->ptoHours);
        $criteria->compare('throttlePos', $this->throttlePos);
        $criteria->compare('brakePos', $this->brakePos);
        $criteria->compare('vBatteryVolts', $this->vBatteryVolts);
        $criteria->compare('j1708Fault', $this->j1708Fault, true);
        $criteria->compare('faultCode', $this->faultCode, true);
        $criteria->compare('malfunctionLamp', $this->malfunctionLamp);
        $criteria->compare('tirePressure', $this->tirePressure, true);
        $criteria->compare('tireTemp', $this->tireTemp, true);
        $criteria->compare('tankLevel', $this->tankLevel);
        $criteria->compare('thermoAverage0', $this->thermoAverage0);
        $criteria->compare('thermoAverage1', $this->thermoAverage1);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => null,
                'updateAttribute' => 'timestamp',
                'timestampExpression' => new CDbExpression('NOW()'),
            )
        ), parent::behaviors());
    }
}