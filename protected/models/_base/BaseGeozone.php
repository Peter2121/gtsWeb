<?php

/**
 * This is the model base class for the table "Geozone".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Geozone".
 *
 * Columns in table "Geozone" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $accountID
 * @property string $geozoneID
 * @property string $sortID
 * @property double $minLatitude
 * @property double $maxLatitude
 * @property double $minLongitude
 * @property double $maxLongitude
 * @property string $zonePurposeID
 * @property integer $reverseGeocode
 * @property integer $arrivalZone
 * @property integer $departureZone
 * @property integer $autoNotify
 * @property integer $zoomRegion
 * @property string $shapeColor
 * @property integer $zoneType
 * @property string $radius
 * @property double $latitude1
 * @property double $longitude1
 * @property double $latitude2
 * @property double $longitude2
 * @property double $latitude3
 * @property double $longitude3
 * @property double $latitude4
 * @property double $longitude4
 * @property double $latitude5
 * @property double $longitude5
 * @property double $latitude6
 * @property double $longitude6
 * @property double $latitude7
 * @property double $longitude7
 * @property double $latitude8
 * @property double $longitude8
 * @property integer $clientUpload
 * @property string $clientID
 * @property string $streetAddress
 * @property string $city
 * @property string $stateProvince
 * @property string $postalCode
 * @property string $country
 * @property string $subdivision
 * @property string $displayName
 * @property string $description
 * @property string $lastUpdateTime
 * @property string $creationTime
 * @property string $groupID
 * @property string $priority
 * @property double $speedLimitKPH
 *
 */
abstract class BaseGeozone extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'Geozone';
    }

    public static function representingColumn() {
        return 'accountID';
    }

    public function rules() {
        return array(
            array('accountID, geozoneID, sortID', 'required'),
            array('reverseGeocode, arrivalZone, departureZone, autoNotify, zoomRegion, zoneType, clientUpload', 'numerical', 'integerOnly'=>true),
            array('minLatitude, maxLatitude, minLongitude, maxLongitude, latitude1, longitude1, latitude2, longitude2, latitude3, longitude3, latitude4, longitude4, latitude5, longitude5, latitude6, longitude6, latitude7, longitude7, latitude8, longitude8, speedLimitKPH', 'numerical'),
            array('accountID, geozoneID, zonePurposeID, subdivision, groupID', 'length', 'max'=>32),
            array('sortID, radius, clientID, lastUpdateTime, creationTime, priority', 'length', 'max'=>10),
            array('shapeColor', 'length', 'max'=>12),
            array('streetAddress', 'length', 'max'=>90),
            array('city, stateProvince, country, displayName', 'length', 'max'=>40),
            array('postalCode', 'length', 'max'=>16),
            array('description', 'length', 'max'=>128),
            array('minLatitude, maxLatitude, minLongitude, maxLongitude, zonePurposeID, reverseGeocode, arrivalZone, departureZone, autoNotify, zoomRegion, shapeColor, zoneType, radius, latitude1, longitude1, latitude2, longitude2, latitude3, longitude3, latitude4, longitude4, latitude5, longitude5, latitude6, longitude6, latitude7, longitude7, latitude8, longitude8, clientUpload, clientID, streetAddress, city, stateProvince, postalCode, country, subdivision, displayName, description, lastUpdateTime, creationTime, groupID, priority, speedLimitKPH', 'default', 'setOnEmpty' => true, 'value' => null),
            array('accountID, geozoneID, sortID, minLatitude, maxLatitude, minLongitude, maxLongitude, zonePurposeID, reverseGeocode, arrivalZone, departureZone, autoNotify, zoomRegion, shapeColor, zoneType, radius, latitude1, longitude1, latitude2, longitude2, latitude3, longitude3, latitude4, longitude4, latitude5, longitude5, latitude6, longitude6, latitude7, longitude7, latitude8, longitude8, clientUpload, clientID, streetAddress, city, stateProvince, postalCode, country, subdivision, displayName, description, lastUpdateTime, creationTime, groupID, priority, speedLimitKPH', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'accountID' => Yii::t('app', 'Account'),
                'geozoneID' => Yii::t('app', 'Geozone'),
                'sortID' => Yii::t('app', 'Sort'),
                'minLatitude' => Yii::t('app', 'Min Latitude'),
                'maxLatitude' => Yii::t('app', 'Max Latitude'),
                'minLongitude' => Yii::t('app', 'Min Longitude'),
                'maxLongitude' => Yii::t('app', 'Max Longitude'),
                'zonePurposeID' => Yii::t('app', 'Zone Purpose'),
                'reverseGeocode' => Yii::t('app', 'Reverse Geocode'),
                'arrivalZone' => Yii::t('app', 'Arrival Zone'),
                'departureZone' => Yii::t('app', 'Departure Zone'),
                'autoNotify' => Yii::t('app', 'Auto Notify'),
                'zoomRegion' => Yii::t('app', 'Zoom Region'),
                'shapeColor' => Yii::t('app', 'Shape Color'),
                'zoneType' => Yii::t('app', 'Zone Type'),
                'radius' => Yii::t('app', 'Radius'),
                'latitude1' => Yii::t('app', 'Latitude1'),
                'longitude1' => Yii::t('app', 'Longitude1'),
                'latitude2' => Yii::t('app', 'Latitude2'),
                'longitude2' => Yii::t('app', 'Longitude2'),
                'latitude3' => Yii::t('app', 'Latitude3'),
                'longitude3' => Yii::t('app', 'Longitude3'),
                'latitude4' => Yii::t('app', 'Latitude4'),
                'longitude4' => Yii::t('app', 'Longitude4'),
                'latitude5' => Yii::t('app', 'Latitude5'),
                'longitude5' => Yii::t('app', 'Longitude5'),
                'latitude6' => Yii::t('app', 'Latitude6'),
                'longitude6' => Yii::t('app', 'Longitude6'),
                'latitude7' => Yii::t('app', 'Latitude7'),
                'longitude7' => Yii::t('app', 'Longitude7'),
                'latitude8' => Yii::t('app', 'Latitude8'),
                'longitude8' => Yii::t('app', 'Longitude8'),
                'clientUpload' => Yii::t('app', 'Client Upload'),
                'clientID' => Yii::t('app', 'Client'),
                'streetAddress' => Yii::t('app', 'Street Address'),
                'city' => Yii::t('app', 'City'),
                'stateProvince' => Yii::t('app', 'State Province'),
                'postalCode' => Yii::t('app', 'Postal Code'),
                'country' => Yii::t('app', 'Country'),
                'subdivision' => Yii::t('app', 'Subdivision'),
                'displayName' => Yii::t('app', 'Display Name'),
                'description' => Yii::t('app', 'Description'),
                'lastUpdateTime' => Yii::t('app', 'Last Update Time'),
                'creationTime' => Yii::t('app', 'Creation Time'),
                'groupID' => Yii::t('app', 'Group'),
                'priority' => Yii::t('app', 'Priority'),
                'speedLimitKPH' => Yii::t('app', 'Speed Limit Kph'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('accountID', $this->accountID, true);
        $criteria->compare('geozoneID', $this->geozoneID, true);
        $criteria->compare('sortID', $this->sortID, true);
        $criteria->compare('minLatitude', $this->minLatitude);
        $criteria->compare('maxLatitude', $this->maxLatitude);
        $criteria->compare('minLongitude', $this->minLongitude);
        $criteria->compare('maxLongitude', $this->maxLongitude);
        $criteria->compare('zonePurposeID', $this->zonePurposeID, true);
        $criteria->compare('reverseGeocode', $this->reverseGeocode);
        $criteria->compare('arrivalZone', $this->arrivalZone);
        $criteria->compare('departureZone', $this->departureZone);
        $criteria->compare('autoNotify', $this->autoNotify);
        $criteria->compare('zoomRegion', $this->zoomRegion);
        $criteria->compare('shapeColor', $this->shapeColor, true);
        $criteria->compare('zoneType', $this->zoneType);
        $criteria->compare('radius', $this->radius, true);
        $criteria->compare('latitude1', $this->latitude1);
        $criteria->compare('longitude1', $this->longitude1);
        $criteria->compare('latitude2', $this->latitude2);
        $criteria->compare('longitude2', $this->longitude2);
        $criteria->compare('latitude3', $this->latitude3);
        $criteria->compare('longitude3', $this->longitude3);
        $criteria->compare('latitude4', $this->latitude4);
        $criteria->compare('longitude4', $this->longitude4);
        $criteria->compare('latitude5', $this->latitude5);
        $criteria->compare('longitude5', $this->longitude5);
        $criteria->compare('latitude6', $this->latitude6);
        $criteria->compare('longitude6', $this->longitude6);
        $criteria->compare('latitude7', $this->latitude7);
        $criteria->compare('longitude7', $this->longitude7);
        $criteria->compare('latitude8', $this->latitude8);
        $criteria->compare('longitude8', $this->longitude8);
        $criteria->compare('clientUpload', $this->clientUpload);
        $criteria->compare('clientID', $this->clientID, true);
        $criteria->compare('streetAddress', $this->streetAddress, true);
        $criteria->compare('city', $this->city, true);
        $criteria->compare('stateProvince', $this->stateProvince, true);
        $criteria->compare('postalCode', $this->postalCode, true);
        $criteria->compare('country', $this->country, true);
        $criteria->compare('subdivision', $this->subdivision, true);
        $criteria->compare('displayName', $this->displayName, true);
        $criteria->compare('description', $this->description, true);
        $criteria->compare('lastUpdateTime', $this->lastUpdateTime, true);
        $criteria->compare('creationTime', $this->creationTime, true);
        $criteria->compare('groupID', $this->groupID, true);
        $criteria->compare('priority', $this->priority, true);
        $criteria->compare('speedLimitKPH', $this->speedLimitKPH);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}