<?php

/**
 * This is the model base class for the table "Entity".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Entity".
 *
 * Columns in table "Entity" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $accountID
 * @property string $entityID
 * @property string $entityType
 * @property string $timestamp
 * @property string $statusCode
 * @property integer $isAttached
 * @property string $deviceID
 * @property double $deviceOdomKM
 * @property double $latitude
 * @property double $longitude
 * @property double $altitude
 * @property string $address
 * @property double $odometerKM
 * @property string $description
 * @property string $lastUpdateTime
 * @property string $creationTime
 *
 */
abstract class BaseEntity extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'Entity';
    }

    public static function representingColumn() {
        return 'accountID';
    }

    public function rules() {
        return array(
            array('accountID, entityID, entityType', 'required'),
            array('isAttached', 'numerical', 'integerOnly'=>true),
            array('deviceOdomKM, latitude, longitude, altitude, odometerKM', 'numerical'),
            array('accountID, entityID, deviceID', 'length', 'max'=>32),
            array('entityType, timestamp, statusCode, lastUpdateTime, creationTime', 'length', 'max'=>10),
            array('address', 'length', 'max'=>90),
            array('description', 'length', 'max'=>128),
            array('timestamp, statusCode, isAttached, deviceID, deviceOdomKM, latitude, longitude, altitude, address, odometerKM, description, lastUpdateTime, creationTime', 'default', 'setOnEmpty' => true, 'value' => null),
            array('accountID, entityID, entityType, timestamp, statusCode, isAttached, deviceID, deviceOdomKM, latitude, longitude, altitude, address, odometerKM, description, lastUpdateTime, creationTime', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'accountID' => Yii::t('app', 'Account'),
                'entityID' => Yii::t('app', 'Entity'),
                'entityType' => Yii::t('app', 'Entity Type'),
                'timestamp' => Yii::t('app', 'Timestamp'),
                'statusCode' => Yii::t('app', 'Status Code'),
                'isAttached' => Yii::t('app', 'Is Attached'),
                'deviceID' => Yii::t('app', 'Device'),
                'deviceOdomKM' => Yii::t('app', 'Device Odom Km'),
                'latitude' => Yii::t('app', 'Latitude'),
                'longitude' => Yii::t('app', 'Longitude'),
                'altitude' => Yii::t('app', 'Altitude'),
                'address' => Yii::t('app', 'Address'),
                'odometerKM' => Yii::t('app', 'Odometer Km'),
                'description' => Yii::t('app', 'Description'),
                'lastUpdateTime' => Yii::t('app', 'Last Update Time'),
                'creationTime' => Yii::t('app', 'Creation Time'),
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('accountID', $this->accountID, true);
        $criteria->compare('entityID', $this->entityID, true);
        $criteria->compare('entityType', $this->entityType, true);
        $criteria->compare('timestamp', $this->timestamp, true);
        $criteria->compare('statusCode', $this->statusCode, true);
        $criteria->compare('isAttached', $this->isAttached);
        $criteria->compare('deviceID', $this->deviceID, true);
        $criteria->compare('deviceOdomKM', $this->deviceOdomKM);
        $criteria->compare('latitude', $this->latitude);
        $criteria->compare('longitude', $this->longitude);
        $criteria->compare('altitude', $this->altitude);
        $criteria->compare('address', $this->address, true);
        $criteria->compare('odometerKM', $this->odometerKM);
        $criteria->compare('description', $this->description, true);
        $criteria->compare('lastUpdateTime', $this->lastUpdateTime, true);
        $criteria->compare('creationTime', $this->creationTime, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => null,
                'updateAttribute' => 'timestamp',
                'timestampExpression' => new CDbExpression('NOW()'),
            )
        ), parent::behaviors());
    }
}